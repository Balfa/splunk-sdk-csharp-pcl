/*
 * Copyright 2014 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// TODO:
//
// [ ] Who should own the HttpResponseMessage used by SearchResults?
//     At present one of these owns the response objecgt:
//
//     + Job: When you call any of teh Job.GetSearchResults*Async methods
//       the current HttpResponseMessage is disposed.
//
//     + SearchResultsReader: When you do a one-shot query you may get 
//       preview SearchResults back before the final result is received.
//       It is the SearchResultsReader that creates new SearchResults
//       objects for each set.
//
// [ ] Parameterize Job.Transition strategy. (It's primitive at present)
//     It's the usual sort of thing:
//     + Linear or non-linear time between retries? 
//     + How long before first retry? 
//     + How many retries?
//     Should we cancel the job, if it times out?
//
// [ ] Implement these search job endpoints
//     
//     search/jobs/{search_id}/search.log: View the log file generated by the search.
//     search/jobs/{search_id}/summary: View field summary information.
//     search/jobs/{search_id}/timeline: View event distribution over time.
//
// [O] Contracts
//
// [O] Documentation
//
// [ ] Trace messages (e.g., when there are no observers)

namespace Splunk.Sdk
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.IO;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System.Xml;
    using System.Xml.Linq;

    public sealed class Job : Entity<Job>
    {
        #region Constructors

        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        /// <param name="namespace"></param>
        /// <param name="collection"></param>
        /// <param name="name"></param>
        internal Job(Context context, Namespace @namespace, ResourceName collection, string name)
            : base(context, @namespace, collection, name)
        { }

        public Job() // TODO: Remove this after refactoring EntityCollection<TEntity> and AtomFeed<TEntity> with an Entity<TEntity> factory
        { }

        #endregion

        #region Properties

        /// <summary>
        /// Gets a value that indicates whether the current <see cref="Job"/>
        /// has completed.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the current <see cref="Job"/> is complete; otherwise,
        /// <c>false</c>.
        /// </returns>
        /// <remarks>
        /// Clients that call <see cref="Job.UpdateAsync"/> to poll for job 
        /// status use this property to determine whether search results are
        /// ready.
        /// </remarks>
        public bool IsCompleted
        {
            get { return this.DispatchState == DispatchState.Done; }
        }

        /// <summary>
        /// Gets value that indicates the current <see cref="Job"/> dispatch
        /// state.
        /// </summary>
        /// <returns>
        /// A <see cref="DispatchState"/> value.
        /// </returns>
        /// <remarks>
        /// Clients that call <see cref="Job.Update"/> to poll for job status
        /// use this property to determine the state of the current search job.
        /// </remarks>
        public DispatchState DispatchState
        {
            get
            {
                if (this.backingFields.DispatchState == DispatchState.Unknown)
                {
                    string value = this.Record.DispatchState.ToString();
                    this.backingFields.DispatchState = (DispatchState)Enum.Parse(typeof(DispatchState), value, ignoreCase: true);
                }
                return this.backingFields.DispatchState;
            }
        }

        #endregion

        #region Methods for retrieving search results

        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public async Task<SearchResults> GetSearchResultsAsync(SearchResultArgs args = null)
        {
            await this.TransitionAsync(DispatchState.Done);

            var searchResults = await this.GetSearchResultsAsync("results", args);
            return searchResults;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public async Task<SearchResults> GetSearchResultsEventsAsync(SearchEventArgs args = null)
        {
            await this.TransitionAsync(DispatchState.Done);

            var searchResults = await this.GetSearchResultsAsync("events", args);
            return searchResults;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public async Task<SearchResults> GetSearchResultsPreviewAsync(SearchResultArgs args = null)
        {
            await this.TransitionAsync(DispatchState.Running);

            var searchResults = await this.GetSearchResultsAsync("results_preview", args);
            return searchResults;
        }

        #endregion

        #region Job Control methods

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task CancelAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "cancel")
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task DisablePreviewAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "disable_preview") 
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task EnablePreviewAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "enable_preview") 
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task FinalizeAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "finalize") 
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task PauseAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "pause") 
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task SaveAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "save") 
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="priority"></param>
        /// <returns></returns>
        public async Task SetPriorityAsync(int priority)
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "priority"),
                new KeyValuePair<string, object>("priority", priority)
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ttl"></param>
        /// <returns></returns>
        public async Task SetTtlAsync(int ttl)
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[]
            { 
                new KeyValuePair<string, object>("action", "setttl"),
                new KeyValuePair<string, object>("ttl", ttl)
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ttl"></param>
        /// <returns></returns>
        public async Task TouchAsync(int ttl)
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[]
            { 
                new KeyValuePair<string, object>("action", "touch"),
                new KeyValuePair<string, object>("ttl", ttl)
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task UnpauseAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "unpause") 
            });
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public async Task UnsaveAsync()
        {
            await this.TransitionAsync(DispatchState.Running);

            await this.PostControlCommandAsync(new KeyValuePair<string, object>[] 
            { 
                new KeyValuePair<string, object>("action", "unsave") 
            });
        }

        #endregion

        #region Methods used by our base class, Entity<TEntity>

        protected override string GetName(dynamic record)
        {
            Contract.Requires<ArgumentNullException>(record != null);
            return record.Sid;
        }

        protected override void Invalidate()
        {
            this.backingFields = InvalidatedBackingFields;
            base.Invalidate();
        }

        #endregion

        #region Privates

        static readonly BackingFields InvalidatedBackingFields = new BackingFields();
        BackingFields backingFields = new BackingFields();

        async Task<SearchResults> GetSearchResultsAsync(string endpoint, IEnumerable<KeyValuePair<string, object>> args)
        {
            var resourceName = new ResourceName(this.ResourceName, endpoint);

            HttpResponseMessage message = await this.Context.GetAsync(this.Namespace, resourceName, args);
            var response = await Response.CreateAsync(message);
            var searchResults = await SearchResults.CreateAsync(response, leaveOpen: false);

            return searchResults;
        }

        async Task PostControlCommandAsync(IEnumerable<KeyValuePair<string, object>> args)
        {
            var resourceName = new ResourceName(this.ResourceName, "control");

            using (var response = await this.Context.PostAsync(this.Namespace, resourceName, args))
            {
                if (response.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    throw new RequestException(response.StatusCode, response.ReasonPhrase, XDocument.Load(content));
                }
            }
        }

        async Task TransitionAsync(DispatchState requiredState)
        {
            while (this.DispatchState < requiredState)
            {
                await Task.Delay(500);
                await this.UpdateAsync();
            }
        }

        #endregion

        #region Types

        private struct BackingFields
        {
            public DispatchState DispatchState;
        }

        #endregion
    }
}
